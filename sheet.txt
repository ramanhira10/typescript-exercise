let sales: number = 123456789;

let course: string = 'TypeScript';

let is_published: boolean = true;

function render (document: any) {
  console.log(document);
}

// Arrays

let number: number[] = [1, 2, 3, 4, 5];

numbers.forEach(n => console.log(n));

// Tuples
let user: [number, string] = [1, 'Test'];

// Enums
enum size { Small = 1, Medium = 2, Large = 3 };

let mySize: Size = Size.Medium;

console.log(mySize);

function calculate (income: number): number {
  return 0;
}

console.log(calculate(100));

// Objects

let employee: {
  id: number,
  name: string,
  retire: (date: Date) => void
} = {
  id: 1,
  name: 'Mosh',
  retire: (date: Date) => {
    console.log(date);
  }
};

// Type Aliases

type Employee = {
  readOnly id: number,
  name: string,
  retire: (date: Date) => void
};

let employee1: Employee {
  id: 1,
  name: 'Mosh',
  retire: (date: Date) => console.log(date)
}

console.log(employee1)

funciton kgToLBS (weight: number | string) {
  if (typeof weight === 'number') {
    return weight * 2.2;
  } else {
    return parseInt(weight * 2.2);
  }
}

// intersections

type Draggable = {
  drag: ()=> void
};

type Resizable = {
  resize: () => void
};

type UIWidget = Draggable && Resizable;

let textBox: UIWidget = {
  drag: () => {},
  resize: () => {}
}

// Literal types
type Quantity = 50 | 100;
let quantity: Quantity = 100;

// Nullable values
function greet(name: string | null | undefined) {

}

// Optional property access operator
type Customer = {
  birthday: Date
}

function getCustomer (id: number): Customer | null | undefined {
  return id === 0 ? null : { birthday: new Date() };
}

let customer = getCustomer(0);
console.log(customer.birthday);

// Optional element access operator
customer?.[0];

// Optional call
let log: any = null;
log?.('a');



